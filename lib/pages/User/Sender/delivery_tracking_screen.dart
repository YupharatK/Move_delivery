// delivery_tracking_screen.dart (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå)

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart' as latlong;

class DeliveryTrackingScreen extends StatefulWidget {
  const DeliveryTrackingScreen({super.key, required this.orderId});
  final String orderId;

  @override
  State<DeliveryTrackingScreen> createState() => _DeliveryTrackingScreenState();
}

class _DeliveryTrackingScreenState extends State<DeliveryTrackingScreen> {
  final MapController _mapController = MapController();

  // --- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ---
  latlong.LatLng? _receiverLocation;
  latlong.LatLng? _senderLocation;
  final List<Marker> _markers = [];
  bool _isLoadingLocations = true;

  // ‚≠êÔ∏è 1. (‡πÄ‡∏û‡∏¥‡πà‡∏°) ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå
  Map<String, dynamic>? _riderData;
  bool _isLoadingRider = false;
  String? _currentDriverId; // ‡πÄ‡∏Å‡πá‡∏ö ID ‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

  late final DocumentReference<Map<String, dynamic>> _orderRef;

  @override
  void initState() {
    super.initState();
    _orderRef = FirebaseFirestore.instance
        .collection('orders')
        .doc(widget.orderId);
    _fetchInitialLocations();
  }

  /// ‚≠êÔ∏è (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á "‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á" (‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á) ‡πÅ‡∏•‡∏∞ "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö" (‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á)
  Future<void> _fetchInitialLocations() async {
    setState(() => _isLoadingLocations = true);
    try {
      // 1. ‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ receiverId ‡πÅ‡∏•‡∏∞ userId (Sender)
      final orderDoc = await _orderRef.get();
      if (!orderDoc.exists) {
        throw Exception('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå');
      }
      final orderData = orderDoc.data()!;
      final receiverId = orderData['receiverId'] as String?;
      final senderId = orderData['userId'] as String?; // ‚≠êÔ∏è ID ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á

      // 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      final List<DocumentSnapshot> docs = await Future.wait([
        if (receiverId != null && receiverId.isNotEmpty)
          FirebaseFirestore.instance.collection('users').doc(receiverId).get(),
        if (senderId != null && senderId.isNotEmpty)
          FirebaseFirestore.instance.collection('users').doc(senderId).get(),
      ]);

      // 3. ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î
      if (docs.isNotEmpty && docs[0].exists) {
        _receiverLocation = _extractLatLng(
          docs[0].data() as Map<String, dynamic>?,
        );
      }
      if (docs.length > 1 && docs[1].exists) {
        _senderLocation = _extractLatLng(
          docs[1].data() as Map<String, dynamic>?,
        );
      }

      if (_receiverLocation == null) debugPrint('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö');
      if (_senderLocation == null) debugPrint('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á');
    } catch (e) {
      debugPrint('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: $e');
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ: $e')));
      }
    } finally {
      if (mounted) {
        setState(() => _isLoadingLocations = false);
      }
    }
  }

  /// ‚≠êÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• location (GeoPoint ‡∏´‡∏£‡∏∑‡∏≠ List) ‡πÄ‡∏õ‡πá‡∏ô LatLng
  latlong.LatLng? _extractLatLng(Map<String, dynamic>? userData) {
    if (userData == null) return null;
    final locationData = userData['addresses']?[0]?['location'];
    if (locationData is GeoPoint) {
      return latlong.LatLng(locationData.latitude, locationData.longitude);
    } else if (locationData is List &&
        locationData.length >= 2 &&
        locationData[0] is num &&
        locationData[1] is num) {
      return latlong.LatLng(
        locationData[0].toDouble(),
        locationData[1].toDouble(),
      );
    }
    return null;
  }

  /// ‡πÅ‡∏õ‡∏•‡∏á status ‡πÄ‡∏õ‡πá‡∏ô step (1-4)
  int _stepFromStatus(String status) {
    switch (status.toUpperCase()) {
      case 'PENDING':
        return 1;
      case 'ASSIGNED':
      case 'PICKED_UP':
        return 2;
      case 'IN_TRANSIT':
        return 3;
      case 'DELIVERED':
      default:
        return 4;
    }
  }

  /// ‡∏≠‡πà‡∏≤‡∏ô item ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏ä‡∏∑‡πà‡∏≠/‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
  Future<Map<String, dynamic>?> _fetchFirstItem(String orderId) async {
    final qs = await FirebaseFirestore.instance
        .collection('orders')
        .doc(orderId)
        .collection('items')
        .limit(1)
        .get();
    if (qs.docs.isEmpty) return null;
    return qs.docs.first.data();
  }

  // ‚≠êÔ∏è 2. (‡πÄ‡∏û‡∏¥‡πà‡∏°) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå
  Future<void> _fetchRiderInfo(String driverId) async {
    // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠ ID ‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏ã‡πâ‡∏≥
    if (_isLoadingRider || driverId == _currentDriverId) return;

    setState(() {
      _isLoadingRider = true;
      _currentDriverId = driverId; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ID ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    });

    try {
      final riderDoc = await FirebaseFirestore.instance
          .collection('riders') // ‚≠êÔ∏è ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å collection 'riders'
          .doc(driverId)
          .get();

      if (mounted) {
        setState(() {
          _riderData = riderDoc.data();
          _isLoadingRider = false;
        });
      }
    } catch (e) {
      debugPrint('Failed to fetch rider info: $e');
      if (mounted) {
        setState(() => _isLoadingRider = false);
        // (Optional: ‡πÅ‡∏™‡∏î‡∏á SnackBar ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô)
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á')),
      body: StreamBuilder<DocumentSnapshot<Map<String, dynamic>>>(
        stream: _orderRef.snapshots(),
        builder: (context, snap) {
          // ‚≠êÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç loading
          if (snap.connectionState == ConnectionState.waiting ||
              _isLoadingLocations) {
            return const Center(child: CircularProgressIndicator());
          }
          if (snap.hasError) {
            return Center(child: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${snap.error}'));
          }
          if (!snap.hasData || !snap.hasData!) {
            return const Center(child: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ'));
          }

          final order = snap.data!.data()!;

          // ‚≠êÔ∏è‚≠êÔ∏è [‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤] ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì step ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‚≠êÔ∏è‚≠êÔ∏è
          final status = (order['status'] ?? 'PENDING').toString();
          final step = _stepFromStatus(status);
          // ‚≠êÔ∏è‚≠êÔ∏è [‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢] ‚≠êÔ∏è‚≠êÔ∏è

          // ‚≠êÔ∏è 3. (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ‡∏î‡∏∂‡∏á driverId ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å _fetchRiderInfo
          final String? driverId = order['driverId'] as String?;
          if (step >= 2 && driverId != null && driverId.isNotEmpty) {
            // ‡πÉ‡∏ä‡πâ addPostFrameCallback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å setState ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å build ‡πÄ‡∏™‡∏£‡πá‡∏à
            WidgetsBinding.instance.addPostFrameCallback((_) {
              if (mounted) {
                _fetchRiderInfo(driverId);
              }
            });
          } else if (step < 2 && _riderData != null) {
            // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ Edge Case)
            WidgetsBinding.instance.addPostFrameCallback((_) {
              if (mounted) {
                setState(() {
                  _riderData = null;
                  _currentDriverId = null;
                });
              }
            });
          }

          // --- ‚≠êÔ∏è ‡πÇ‡∏•‡∏à‡∏¥‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ---
          final driverGeoPoint = order['driverLocation'] as GeoPoint?;
          latlong.LatLng? currentDriverLocation;
          _markers.clear(); // ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏∏‡∏î‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà

          // 1. (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡∏°‡∏≠) ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏∏‡∏î‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á) üìç
          if (_receiverLocation != null) {
            _markers.add(
              Marker(
                width: 80.0,
                height: 80.0,
                point: _receiverLocation!,
                child: Icon(
                  Icons.location_on, // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏´‡∏°‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
                  color: Colors.green.shade700,
                  size: 45,
                ),
              ),
            );
          }

          // ‚≠êÔ∏è 2. (‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç) ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏∏‡∏î‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
          // ‡∏ñ‡πâ‡∏≤ step >= 2 (‡∏°‡∏µ‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß) -> ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö üõµ
          if (step >= 2 && driverGeoPoint != null) {
            currentDriverLocation = latlong.LatLng(
              driverGeoPoint.latitude,
              driverGeoPoint.longitude,
            );
            _markers.add(
              Marker(
                width: 80.0,
                height: 80.0,
                point: currentDriverLocation,
                child: Icon(
                  Icons.moped, // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
                  color: Theme.of(context).primaryColor,
                  size: 40,
                ),
              ),
            );

            // ‡∏¢‡πâ‡∏≤‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏´‡∏≤‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
            WidgetsBinding.instance.addPostFrameCallback((_) {
              if (mounted && currentDriverLocation != null) {
                // Add null check
                _mapController.move(currentDriverLocation!, 16.0);
              }
            });
          }
          // ‚≠êÔ∏è ‡∏ñ‡πâ‡∏≤ step == 1 (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô) -> ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á üè¨
          else if (step == 1 && _senderLocation != null) {
            _markers.add(
              Marker(
                width: 80.0,
                height: 80.0,
                point: _senderLocation!,
                child: Icon(
                  Icons.store, // ‚≠êÔ∏è ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á (‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á)
                  color: Colors.blue.shade700,
                  size: 40,
                ),
              ),
            );
            // (Optional) ‡∏¢‡πâ‡∏≤‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
            WidgetsBinding.instance.addPostFrameCallback((_) {
              if (mounted && _senderLocation != null) {
                // Add null check
                _mapController.move(_senderLocation!, 15.0);
              }
            });
          }

          // ‚≠êÔ∏è 3. (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
          final latlong.LatLng mapCenter =
              currentDriverLocation ?? // 1. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö, ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
              _senderLocation ?? // 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ, ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
              _receiverLocation ?? // 3. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡∏Å, ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
              const latlong.LatLng(16.43, 102.83); // 4. ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

          final double mapZoom = (currentDriverLocation != null) ? 16.0 : 14.0;
          // --- ‚≠êÔ∏è ‡∏à‡∏ö‡πÇ‡∏•‡∏à‡∏¥‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ---

          return Stack(
            children: [
              // --- 1) ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ---
              _buildMapArea(mapCenter, mapZoom),

              // --- 2) ‡πÅ‡∏ú‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ---
              DraggableScrollableSheet(
                initialChildSize: 0.5,
                minChildSize: 0.2,
                maxChildSize: 0.9,
                builder: (context, scrollController) {
                  final pendingPhotoUrl = (order['pendingPhotoUrl'] ?? '')
                      .toString();
                  final deliveredPhotoUrl = (order['deliveredPhotoUrl'] ?? '')
                      .toString();
                  final total = (order['total'] as num?)?.toDouble() ?? 0.0;
                  final itemCount = (order['itemCount'] as num?)?.toInt() ?? 1;

                  return Container(
                    decoration: const BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.vertical(
                        top: Radius.circular(20),
                      ),
                    ),
                    child: SingleChildScrollView(
                      controller: scrollController,
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: FutureBuilder<Map<String, dynamic>?>(
                          future: _fetchFirstItem(widget.orderId),
                          builder: (context, itemSnap) {
                            final firstItem = itemSnap.data;
                            final itemName = (firstItem?['name'] ?? '‚Äî')
                                .toString();
                            final itemImg = (firstItem?['imageUrl'] ?? '')
                                .toString();
                            final imageToShow = pendingPhotoUrl.isNotEmpty
                                ? pendingPhotoUrl
                                : itemImg;

                            return Column(
                              children: [
                                _buildStatusTracker(
                                  context: context,
                                  currentStep: step,
                                  statusText: status,
                                ),
                                const SizedBox(height: 24),
                                _buildInfoCard(
                                  title: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
                                  child: _buildProductDetails(
                                    imageUrl: imageToShow,
                                    name: itemName,
                                    itemCount: itemCount,
                                    total: total,
                                  ),
                                ),
                                const SizedBox(height: 16),

                                // ‚≠êÔ∏è (‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
                                // ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏ñ‡πâ‡∏≤ step < 2
                                if (step >= 2) ...[
                                  _buildInfoCard(
                                    title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå',
                                    // ‚≠êÔ∏è 4. (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏õ‡πÉ‡∏´‡πâ Widget
                                    child: _buildRiderInfo(
                                      riderData: _riderData,
                                      isLoading: _isLoadingRider,
                                    ),
                                  ),
                                  const SizedBox(height: 16),
                                ],

                                _buildInfoCard(
                                  title: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
                                  child: _buildDeliveryReport(
                                    deliveredPhotoUrl: deliveredPhotoUrl,
                                    status: status,
                                  ),
                                ),
                                const SizedBox(height: 24),
                                SizedBox(
                                  width: double.infinity,
                                  child: ElevatedButton(
                                    onPressed:
                                        (status.toUpperCase() == 'DELIVERED')
                                        ? () => Navigator.pop(context)
                                        : null,
                                    child: Text(
                                      (status.toUpperCase() == 'DELIVERED')
                                          ? '‡∏õ‡∏¥‡∏î'
                                          : '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',
                                    ),
                                  ),
                                ),
                              ],
                            );
                          },
                        ),
                      ),
                    ),
                  );
                },
              ),
            ],
          );
        },
      ),
    );
  }

  // ---------- Widgets (‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö UI) ----------

  Widget _buildMapArea(latlong.LatLng center, double zoom) {
    const String yourAppPackageName =
        'com.example.move_delivery'; // ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Package Name ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

    return FlutterMap(
      mapController: _mapController,
      options: MapOptions(initialCenter: center, initialZoom: zoom),
      children: [
        TileLayer(
          urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
          userAgentPackageName: yourAppPackageName,
        ),
        MarkerLayer(markers: _markers),
      ],
    );
  }

  Widget _buildInfoCard({required String title, required Widget child}) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 8),
        Card(
          elevation: 1,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          child: Padding(padding: const EdgeInsets.all(12.0), child: child),
        ),
      ],
    );
  }

  Widget _buildStatusTracker({
    required BuildContext context,
    required int currentStep,
    required String statusText,
  }) {
    final activeColor = Theme.of(context).primaryColor;
    final inactiveColor = Colors.grey.shade400;

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: activeColor,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',
            style: TextStyle(
              color: Colors.white,
              fontWeight: FontWeight.bold,
              fontSize: 18,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            statusText == 'DELIVERED' ? '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' : statusText,
            style: TextStyle(color: Colors.white.withOpacity(0.9)),
          ),
          const SizedBox(height: 20),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              _buildStatusIcon(
                Icons.store, // 1. ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤/‡∏£‡∏≠‡∏£‡∏±‡∏ö
                1,
                activeColor,
                inactiveColor,
                isActive: currentStep >= 1,
              ),
              _buildStatusLine(currentStep >= 2, activeColor, inactiveColor),
              _buildStatusIcon(
                Icons.moped, // 2. ‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á
                2,
                activeColor,
                inactiveColor,
                isActive: currentStep >= 2,
              ),
              _buildStatusLine(currentStep >= 3, activeColor, inactiveColor),
              _buildStatusIcon(
                Icons.local_shipping, // 3. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏™‡πà‡∏á
                3,
                activeColor,
                inactiveColor,
                isActive: currentStep >= 3,
              ),
              _buildStatusLine(currentStep >= 4, activeColor, inactiveColor),
              _buildStatusIcon(
                Icons.location_on, // 4. ‡∏ñ‡∏∂‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
                4,
                activeColor,
                inactiveColor,
                isActive: currentStep >= 4,
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildStatusIcon(
    IconData icon,
    int step,
    Color active,
    Color inactive, {
    required bool isActive,
  }) {
    return Container(
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: isActive ? Colors.white : inactive.withOpacity(0.2),
        shape: BoxShape.circle,
      ),
      child: Icon(icon, color: isActive ? active : Colors.white, size: 24),
    );
  }

  Widget _buildStatusLine(bool filled, Color active, Color inactive) {
    return Expanded(
      child: Container(height: 4, color: filled ? active : inactive),
    );
  }

  Widget _buildProductDetails({
    required String imageUrl,
    required String name,
    required int itemCount,
    required double total,
  }) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        ClipRRect(
          borderRadius: BorderRadius.circular(8),
          child: (imageUrl.isNotEmpty)
              ? Image.network(
                  imageUrl,
                  width: 80,
                  height: 80,
                  fit: BoxFit.cover,
                  errorBuilder: (_, __, ___) => _imgFallback(),
                )
              : _imgFallback(),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                name.isEmpty ? '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' : name,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
              const SizedBox(height: 6),
              Text('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô: $itemCount'),
              Text('‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${total.toStringAsFixed(2)} ‡∏ø'),
            ],
          ),
        ),
      ],
    );
  }

  Widget _imgFallback() => Container(
    width: 80,
    height: 80,
    color: Colors.grey[200],
    child: const Icon(Icons.image),
  );

  // ‚≠êÔ∏è 5. (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) Widget ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå
  Widget _buildRiderInfo({
    required Map<String, dynamic>? riderData,
    required bool isLoading,
  }) {
    if (isLoading) {
      return const Center(child: CircularProgressIndicator(strokeWidth: 2));
    }
    if (riderData == null) {
      return const Center(child: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå'));
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Map
    final name = (riderData['name'] ?? '‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå').toString();
    final phone = (riderData['phone'] ?? '-').toString();
    final vehicle = (riderData['vehicleRegistration'] ?? '-').toString();
    final photoUrl = (riderData['userPhotoUrl'] ?? '').toString();

    return Row(
      children: [
        CircleAvatar(
          radius: 25,
          backgroundColor: Colors.grey[300],
          backgroundImage: (photoUrl.isNotEmpty)
              ? NetworkImage(photoUrl)
              : null,
          child: (photoUrl.isEmpty)
              ? const Icon(Icons.person, color: Colors.white)
              : null,
        ),
        const SizedBox(width: 12),
        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(name, style: const TextStyle(fontWeight: FontWeight.bold)),
            Text('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ : $phone'),
            Text('‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ : $vehicle'),
          ],
        ),
      ],
    );
  }

  Widget _buildDeliveryReport({
    required String deliveredPhotoUrl,
    required String status,
  }) {
    if (status.toUpperCase() != 'DELIVERED') {
      return Row(
        children: [
          Container(
            width: 80,
            height: 80,
            color: Colors.grey[200],
            child: const Icon(Icons.inventory_2_outlined),
          ),
          const SizedBox(width: 12),
          const Expanded(child: Text('‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô...')),
        ],
      );
    }

    return Row(
      children: [
        ClipRRect(
          borderRadius: BorderRadius.circular(8),
          child: (deliveredPhotoUrl.isNotEmpty)
              ? Image.network(
                  deliveredPhotoUrl,
                  width: 80,
                  height: 80,
                  fit: BoxFit.cover,
                  errorBuilder: (_, __, ___) => _imgFallback(),
                )
              : _imgFallback(),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.green.shade100,
              borderRadius: BorderRadius.circular(8),
            ),
            child: Text(
              deliveredPhotoUrl.isNotEmpty
                  ? '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
                  : '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô)',
              textAlign: TextAlign.center,
              style: TextStyle(color: Colors.green.shade900),
            ),
          ),
        ),
      ],
    );
  }
}
